{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v1.json", "dbt_version": "0.19.2", "generated_at": "2022-04-13T05:11:50.918527Z", "invocation_id": "00e37a9b-7fcd-4163-84ae-20166d1eaa26", "env": {}, "project_id": "f005e70093f1ddd3daa6316f5ec6f69e", "user_id": "f16447cf-7218-482a-a78c-744d577db4bb", "send_anonymous_usage_stats": true, "adapter_type": "oracle"}, "nodes": {"model.dbt_demo.customers": {"raw_sql": "with customers as (\r\n\r\n    select * from {{ ref('stg_customers') }}\r\n\r\n),\r\n\r\norders as (\r\n\r\n    select * from {{ ref('stg_orders') }}\r\n\r\n),\r\n\r\npayments as (\r\n\r\n    select * from {{ ref('stg_payments') }}\r\n\r\n),\r\n\r\ncustomer_orders as (\r\n\r\n        select\r\n        customer_id,\r\n\r\n        min(order_date) as first_order,\r\n        max(order_date) as most_recent_order,\r\n        count(order_id) as number_of_orders\r\n    from orders\r\n\r\n    group by customer_id\r\n\r\n),\r\n\r\ncustomer_payments as (\r\n\r\n    select\r\n        orders.customer_id,\r\n        sum(amount) as total_amount\r\n\r\n    from payments\r\n\r\n    left join orders on\r\n         payments.order_id = orders.order_id\r\n\r\n    group by orders.customer_id\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        customers.customer_id,\r\n        customers.first_name,\r\n        customers.last_name,\r\n        customer_orders.first_order,\r\n        customer_orders.most_recent_order,\r\n        customer_orders.number_of_orders,\r\n        customer_payments.total_amount as customer_lifetime_value\r\n\r\n    from customers\r\n\r\n    left join customer_orders\r\n        on customers.customer_id = customer_orders.customer_id\r\n\r\n    left join customer_payments\r\n        on  customers.customer_id = customer_payments.customer_id\r\n\r\n)\r\n\r\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.dbt_demo.stg_customers", "model.dbt_demo.stg_orders", "model.dbt_demo.stg_payments"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "customers"], "unique_id": "model.dbt_demo.customers", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "customers.sql", "original_file_path": "models\\customers.sql", "name": "customers", "alias": "customers", "checksum": {"name": "sha256", "checksum": "73d96e1da60eb1c81f2288ceaa3ecea10771928f328a7f6185ef9aa3c649739c"}, "tags": [], "refs": [["stg_customers"], ["stg_orders"], ["stg_payments"]], "sources": [], "description": "This table has basic information about a customer, as well as some derived facts based on a customer's orders", "columns": {"customer_id": {"name": "customer_id", "description": "This is a unique identifier for a customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Customer's first name. PII.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Customer's last name. PII.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_order": {"name": "first_order", "description": "Date (UTC) of a customer's first order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_order": {"name": "most_recent_order", "description": "Date (UTC) of a customer's most recent order", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_orders": {"name": "number_of_orders", "description": "Count of the number of orders a customer has placed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_order_amount": {"name": "total_order_amount", "description": "Total value (AUD) of a customer's orders", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\schema.yml", "build_path": "target\\run\\dbt_demo\\models\\customers.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "with customers as (\n\n    select * from lcj.stg_customers\n\n),\n\norders as (\n\n    select * from lcj.stg_orders\n\n),\n\npayments as (\n\n    select * from lcj.stg_payments\n\n),\n\ncustomer_orders as (\n\n        select\n        customer_id,\n\n        min(order_date) as first_order,\n        max(order_date) as most_recent_order,\n        count(order_id) as number_of_orders\n    from orders\n\n    group by customer_id\n\n),\n\ncustomer_payments as (\n\n    select\n        orders.customer_id,\n        sum(amount) as total_amount\n\n    from payments\n\n    left join orders on\n         payments.order_id = orders.order_id\n\n    group by orders.customer_id\n\n),\n\nfinal as (\n\n    select\n        customers.customer_id,\n        customers.first_name,\n        customers.last_name,\n        customer_orders.first_order,\n        customer_orders.most_recent_order,\n        customer_orders.number_of_orders,\n        customer_payments.total_amount as customer_lifetime_value\n\n    from customers\n\n    left join customer_orders\n        on customers.customer_id = customer_orders.customer_id\n\n    left join customer_payments\n        on  customers.customer_id = customer_payments.customer_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "lcj.customers"}, "model.dbt_demo.orders_test": {"raw_sql": "{% set payment_methods = ['credit_card', 'coupon', 'bank_transfer', 'gift_card'] %}\r\n\r\nwith orders as (\r\n\r\n    select * from {{ ref('stg_orders') }}\r\n\r\n),\r\n\r\npayments as (\r\n\r\n    select * from {{ ref('stg_payments') }}\r\n\r\n),\r\n\r\norder_payments as (\r\n\r\n    select\r\n        order_id,\r\n\r\n        {% for payment_method in payment_methods -%}\r\n        sum(case when payment_method = '{{ payment_method }}' then amount else 0 end) as {{ payment_method }}_amount,\r\n        {% endfor -%}\r\n\r\n        sum(amount) as total_amount\r\n\r\n    from payments\r\n\r\n    group by order_id\r\n\r\n),\r\n\r\nfinal as (\r\n\r\n    select\r\n        orders.order_id,\r\n        orders.customer_id,\r\n        orders.order_date,\r\n        orders.status,\r\n\r\n        {% for payment_method in payment_methods -%}\r\n\r\n        order_payments.{{ payment_method }}_amount,\r\n\r\n        {% endfor -%}\r\n\r\n        order_payments.total_amount as amount\r\n\r\n    from orders\r\n\r\n\r\n    left join order_payments\r\n        on orders.order_id = order_payments.order_id\r\n\r\n)\r\n\r\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["model.dbt_demo.stg_orders", "model.dbt_demo.stg_payments"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "orders_test"], "unique_id": "model.dbt_demo.orders_test", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "orders_test.sql", "original_file_path": "models\\orders_test.sql", "name": "orders_test", "alias": "orders_test", "checksum": {"name": "sha256", "checksum": "e00831dcf99a00e138ee9e3130c26f111186d6b6e9af67e50a51826a1f821fa2"}, "tags": [], "refs": [["stg_orders"], ["stg_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": "target\\run\\dbt_demo\\models\\orders_test.sql", "deferred": false, "unrendered_config": {"materialized": "table"}, "compiled_sql": "\n\nwith orders as (\n\n    select * from lcj.stg_orders\n\n),\n\npayments as (\n\n    select * from lcj.stg_payments\n\n),\n\norder_payments as (\n\n    select\n        order_id,\n\n        sum(case when payment_method = 'credit_card' then amount else 0 end) as credit_card_amount,\n        sum(case when payment_method = 'coupon' then amount else 0 end) as coupon_amount,\n        sum(case when payment_method = 'bank_transfer' then amount else 0 end) as bank_transfer_amount,\n        sum(case when payment_method = 'gift_card' then amount else 0 end) as gift_card_amount,\n        sum(amount) as total_amount\n\n    from payments\n\n    group by order_id\n\n),\n\nfinal as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.order_date,\n        orders.status,\n\n        order_payments.credit_card_amount,\n\n        order_payments.coupon_amount,\n\n        order_payments.bank_transfer_amount,\n\n        order_payments.gift_card_amount,\n\n        order_payments.total_amount as amount\n\n    from orders\n\n\n    left join order_payments\n        on orders.order_id = order_payments.order_id\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "lcj.orders_test"}, "model.dbt_demo.stg_customers": {"raw_sql": "with source as (\r\n    select * from {{ ref('raw_customers') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n        id as customer_id,\r\n        first_name,\r\n        last_name\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["seed.dbt_demo.raw_customers"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "staging", "stg_customers"], "unique_id": "model.dbt_demo.stg_customers", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "staging\\stg_customers.sql", "original_file_path": "models\\staging\\stg_customers.sql", "name": "stg_customers", "alias": "stg_customers", "checksum": {"name": "sha256", "checksum": "a2e5da7fcb43bcb12067ab01f684a6d85d7460f5c81f1931682f3a79771d85eb"}, "tags": [], "refs": [["raw_customers"]], "sources": [], "description": "", "columns": {"customer_id": {"name": "customer_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\staging\\schema.yml", "build_path": "target\\run\\dbt_demo\\models\\staging\\stg_customers.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with source as (\n    select * from lcj.raw_customers\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        first_name,\n        last_name\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "lcj.stg_customers"}, "model.dbt_demo.stg_orders": {"raw_sql": "with source as (\r\n\r\n    select * from {{ ref('raw_orders') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n        id as order_id,\r\n        user_id as customer_id,\r\n        order_date,\r\n        status\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["seed.dbt_demo.raw_orders"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "staging", "stg_orders"], "unique_id": "model.dbt_demo.stg_orders", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "staging\\stg_orders.sql", "original_file_path": "models\\staging\\stg_orders.sql", "name": "stg_orders", "alias": "stg_orders", "checksum": {"name": "sha256", "checksum": "7218137f27345cf66ba6cb9e9a76bf6d38b3a7c81d0eed89dd0dc2a5f325267c"}, "tags": [], "refs": [["raw_orders"]], "sources": [], "description": "", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\staging\\schema.yml", "build_path": "target\\run\\dbt_demo\\models\\staging\\stg_orders.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with source as (\n\n    select * from lcj.raw_orders\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        user_id as customer_id,\n        order_date,\n        status\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "lcj.stg_orders"}, "model.dbt_demo.stg_payments": {"raw_sql": "with source as (\r\n\r\n    select * from {{ ref('raw_payments') }}\r\n\r\n),\r\n\r\nrenamed as (\r\n\r\n    select\r\n        id as payment_id,\r\n        order_id,\r\n        payment_method,\r\n\r\n        -- `amount` is currently stored in cents, so we convert it to dollars\r\n        amount / 100 as amount\r\n\r\n    from source\r\n\r\n)\r\n\r\nselect * from renamed", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"], "nodes": ["seed.dbt_demo.raw_payments"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "staging", "stg_payments"], "unique_id": "model.dbt_demo.stg_payments", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "staging\\stg_payments.sql", "original_file_path": "models\\staging\\stg_payments.sql", "name": "stg_payments", "alias": "stg_payments", "checksum": {"name": "sha256", "checksum": "f567b9fd234e6f538190aede8df82cb68ba0dd9f04a82a7a19e258f76596c1ee"}, "tags": [], "refs": [["raw_payments"]], "sources": [], "description": "", "columns": {"payment_id": {"name": "payment_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models\\staging\\schema.yml", "build_path": "target\\run\\dbt_demo\\models\\staging\\stg_payments.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "compiled_sql": "with source as (\n\n    select * from lcj.raw_payments\n\n),\n\nrenamed as (\n\n    select\n        id as payment_id,\n        order_id,\n        payment_method,\n\n        -- `amount` is currently stored in cents, so we convert it to dollars\n        amount / 100 as amount\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "lcj.stg_payments"}, "seed.dbt_demo.raw_customers": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "raw_customers"], "unique_id": "seed.dbt_demo.raw_customers", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "raw_customers.csv", "original_file_path": "datas\\raw_customers.csv", "name": "raw_customers", "alias": "raw_customers", "checksum": {"name": "sha256", "checksum": "1ab8a2bd9cccbbc89ed008d88e34284884db5fbc015ea197e9f8660022396bc3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}}, "seed.dbt_demo.raw_orders": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "raw_orders"], "unique_id": "seed.dbt_demo.raw_orders", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "raw_orders.csv", "original_file_path": "datas\\raw_orders.csv", "name": "raw_orders", "alias": "raw_orders", "checksum": {"name": "sha256", "checksum": "ee6c68d1639ec2b23a4495ec12475e09b8ed4b61e23ab0411ea7ec76648356f7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}}, "seed.dbt_demo.raw_payments": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "raw_payments"], "unique_id": "seed.dbt_demo.raw_payments", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "raw_payments.csv", "original_file_path": "datas\\raw_payments.csv", "name": "raw_payments", "alias": "raw_payments", "checksum": {"name": "sha256", "checksum": "3e7dd0929706a90afb151760f2d808ed35bd013e2d8c6bea96e6aaaf11af4525"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}}, "test.dbt_demo.unique_customers_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ ref('customers') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_demo.customers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "unique_customers_customer_id"], "unique_id": "test.dbt_demo.unique_customers_customer_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\unique_customers_customer_id.sql", "original_file_path": "models\\schema.yml", "name": "unique_customers_customer_id", "alias": "unique_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.not_null_customers_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ ref('customers') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_demo.customers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_customers_customer_id"], "unique_id": "test.dbt_demo.not_null_customers_customer_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_customers_customer_id.sql", "original_file_path": "models\\schema.yml", "name": "not_null_customers_customer_id", "alias": "not_null_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.unique_orders_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "unique_orders_order_id"], "unique_id": "test.dbt_demo.unique_orders_order_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\unique_orders_order_id.sql", "original_file_path": "models\\schema.yml", "name": "unique_orders_order_id", "alias": "unique_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "order_id"}, "test.dbt_demo.not_null_orders_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_order_id"], "unique_id": "test.dbt_demo.not_null_orders_order_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_order_id.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_order_id", "alias": "not_null_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "order_id"}, "test.dbt_demo.not_null_orders_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_customer_id"], "unique_id": "test.dbt_demo.not_null_orders_customer_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_customer_id.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_customer_id", "alias": "not_null_orders_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.relationships_orders_customer_id__customer_id__ref_customers_": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_relationships(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "relationships", "kwargs": {"to": "ref('customers')", "field": "customer_id", "column_name": "customer_id", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt_oracle.oracle__test_relationships"], "nodes": ["model.dbt_demo.customers"]}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "relationships_orders_customer_id__customer_id__ref_customers_"], "unique_id": "test.dbt_demo.relationships_orders_customer_id__customer_id__ref_customers_", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\relationships_orders_60f78bf0ddd08829598a2076a90fd183.sql", "original_file_path": "models\\schema.yml", "name": "relationships_orders_customer_id__customer_id__ref_customers_", "alias": "relationships_orders_customer_id__customer_id__ref_customers_", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["customers"], ["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.accepted_values_orders_status__placed__shipped__completed__return_pending__returned": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt_oracle.oracle__test_accepted_values"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "accepted_values_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.dbt_demo.accepted_values_orders_status__placed__shipped__completed__return_pending__returned", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\accepted_values_orders_758238c28b8980ea7fe9d60a8d851ea8.sql", "original_file_path": "models\\schema.yml", "name": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned", "alias": "accepted_values_orders_status__placed__shipped__completed__return_pending__returned", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "status"}, "test.dbt_demo.not_null_orders_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_amount"], "unique_id": "test.dbt_demo.not_null_orders_amount", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_amount.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_amount", "alias": "not_null_orders_amount", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "amount"}, "test.dbt_demo.not_null_orders_credit_card_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_card_amount", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_credit_card_amount"], "unique_id": "test.dbt_demo.not_null_orders_credit_card_amount", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_credit_card_amount.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_credit_card_amount", "alias": "not_null_orders_credit_card_amount", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "credit_card_amount"}, "test.dbt_demo.not_null_orders_coupon_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "coupon_amount", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_coupon_amount"], "unique_id": "test.dbt_demo.not_null_orders_coupon_amount", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_coupon_amount.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_coupon_amount", "alias": "not_null_orders_coupon_amount", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "coupon_amount"}, "test.dbt_demo.not_null_orders_bank_transfer_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bank_transfer_amount", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_bank_transfer_amount"], "unique_id": "test.dbt_demo.not_null_orders_bank_transfer_amount", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_bank_transfer_amount.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_bank_transfer_amount", "alias": "not_null_orders_bank_transfer_amount", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "bank_transfer_amount"}, "test.dbt_demo.not_null_orders_gift_card_amount": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gift_card_amount", "model": "{{ ref('orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_orders_gift_card_amount"], "unique_id": "test.dbt_demo.not_null_orders_gift_card_amount", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_orders_gift_card_amount.sql", "original_file_path": "models\\schema.yml", "name": "not_null_orders_gift_card_amount", "alias": "not_null_orders_gift_card_amount", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "gift_card_amount"}, "test.dbt_demo.unique_stg_customers_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ ref('stg_customers') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_demo.stg_customers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "unique_stg_customers_customer_id"], "unique_id": "test.dbt_demo.unique_stg_customers_customer_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\unique_stg_customers_customer_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "unique_stg_customers_customer_id", "alias": "unique_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.not_null_stg_customers_customer_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ ref('stg_customers') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_demo.stg_customers"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_stg_customers_customer_id"], "unique_id": "test.dbt_demo.not_null_stg_customers_customer_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_stg_customers_customer_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "not_null_stg_customers_customer_id", "alias": "not_null_stg_customers_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_customers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "customer_id"}, "test.dbt_demo.unique_stg_orders_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ ref('stg_orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_demo.stg_orders"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "unique_stg_orders_order_id"], "unique_id": "test.dbt_demo.unique_stg_orders_order_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\unique_stg_orders_order_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "unique_stg_orders_order_id", "alias": "unique_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "order_id"}, "test.dbt_demo.not_null_stg_orders_order_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ ref('stg_orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_demo.stg_orders"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_stg_orders_order_id"], "unique_id": "test.dbt_demo.not_null_stg_orders_order_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_stg_orders_order_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "not_null_stg_orders_order_id", "alias": "not_null_stg_orders_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "order_id"}, "test.dbt_demo.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["placed", "shipped", "completed", "return_pending", "returned"], "column_name": "status", "model": "{{ ref('stg_orders') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt_oracle.oracle__test_accepted_values"], "nodes": ["model.dbt_demo.stg_orders"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned"], "unique_id": "test.dbt_demo.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\accepted_values_stg_orders_758238c28b8980ea7fe9d60a8d851ea8.sql", "original_file_path": "models\\staging\\schema.yml", "name": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "alias": "accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_orders"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "status"}, "test.dbt_demo.unique_stg_payments_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ ref('stg_payments') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_demo.stg_payments"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "unique_stg_payments_payment_id"], "unique_id": "test.dbt_demo.unique_stg_payments_payment_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\unique_stg_payments_payment_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "unique_stg_payments_payment_id", "alias": "unique_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "payment_id"}, "test.dbt_demo.not_null_stg_payments_payment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ ref('stg_payments') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_demo.stg_payments"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "not_null_stg_payments_payment_id"], "unique_id": "test.dbt_demo.not_null_stg_payments_payment_id", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\not_null_stg_payments_payment_id.sql", "original_file_path": "models\\staging\\schema.yml", "name": "not_null_stg_payments_payment_id", "alias": "not_null_stg_payments_payment_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "payment_id"}, "test.dbt_demo.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_accepted_values(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": ["credit_card", "coupon", "bank_transfer", "gift_card"], "column_name": "payment_method", "model": "{{ ref('stg_payments') }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt_oracle.oracle__test_accepted_values"], "nodes": ["model.dbt_demo.stg_payments"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "post-hook": [], "pre-hook": []}, "database": "limsbi", "schema": "lcj", "fqn": ["dbt_demo", "schema_test", "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card"], "unique_id": "test.dbt_demo.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "schema_test\\accepted_values_stg_payments_944011baab727320a6b119d4d81589ae.sql", "original_file_path": "models\\staging\\schema.yml", "name": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "alias": "accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_payments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "severity": "ERROR"}, "column_name": "payment_method"}}, "sources": {}, "macros": {"macro.dbt_oracle.oracle__get_columns_in_query": {"unique_id": "macro.dbt_oracle.oracle__get_columns_in_query", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__get_columns_in_query", "macro_sql": "{% macro oracle__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) dbt_sbq_tmp\n        where 1 = 0 and rownum < 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__create_schema": {"unique_id": "macro.dbt_oracle.oracle__create_schema", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_schema", "macro_sql": "{% macro oracle__create_schema(database_name, schema_name) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    -- Noop for not breaking tests, oracle\n    -- schemas are actualy users, we can't\n    -- create it here\n    select 'a' from dual\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__drop_schema": {"unique_id": "macro.dbt_oracle.oracle__drop_schema", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__drop_schema", "macro_sql": "{% macro oracle__drop_schema(schema) -%}\n  {% if schema.database -%}\n    {{ adapter.verify_database(schema.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    -- from https://gist.github.com/rafaeleyng/33eaef673fc4ee98a6de4f70c8ce3657\n    BEGIN\n    FOR cur_rec IN (SELECT object_name, object_type\n                      FROM ALL_objects\n                      WHERE object_type IN\n                              ('TABLE',\n                                'VIEW',\n                                'PACKAGE',\n                                'PROCEDURE',\n                                'FUNCTION',\n                                'SEQUENCE',\n                                'TYPE',\n                                'SYNONYM',\n                                'MATERIALIZED VIEW'\n                              )\n                      AND owner = '{{ schema | upper }}')\n    LOOP\n        BEGIN\n          IF cur_rec.object_type = 'TABLE'\n          THEN\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\" CASCADE CONSTRAINTS';\n          ELSE\n              EXECUTE IMMEDIATE    'DROP '\n                                || cur_rec.object_type\n                                || ' \"'\n                                || cur_rec.object_name\n                                || '\"';\n          END IF;\n        EXCEPTION\n          WHEN OTHERS\n          THEN\n              DBMS_OUTPUT.put_line (   'FAILED: DROP '\n                                    || cur_rec.object_type\n                                    || ' \"'\n                                    || cur_rec.object_name\n                                    || '\"'\n                                  );\n        END;\n    END LOOP;\n  END;\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__create_table_as_backup": {"unique_id": "macro.dbt_oracle.oracle__create_table_as_backup", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_table_as_backup", "macro_sql": "{% macro oracle__create_table_as_backup(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    global temporary\n  {%- endif %} table {{ relation.include(schema=(not temporary)).quote(schema=False, identifier=False) }}\n  {% if temporary -%} on commit preserve rows {%- endif %}\n  as\n    {{ sql }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__create_table_as": {"unique_id": "macro.dbt_oracle.oracle__create_table_as", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_table_as", "macro_sql": "{% macro oracle__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    global temporary\n  {%- endif %} table {{ relation.include(schema=(not temporary)).quote(schema=False, identifier=False) }}\n  {% if temporary -%} on commit preserve rows {%- endif %}\n  as\n    {{ sql }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__create_view_as": {"unique_id": "macro.dbt_oracle.oracle__create_view_as", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__create_view_as", "macro_sql": "{% macro oracle__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.quote(schema=False, identifier=False)  }} as\n    {{ sql }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__get_columns_in_relation": {"unique_id": "macro.dbt_oracle.oracle__get_columns_in_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__get_columns_in_relation", "macro_sql": "{% macro oracle__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      with columns as (\n        select\n            UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\n            UPPER(owner) table_schema,\n            table_name,\n            column_name,\n            data_type,\n            data_type_mod,\n            decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\n            data_type_owner domain_schema,\n            data_length character_maximum_length,\n            data_length character_octet_length,\n            data_length,\n            data_precision numeric_precision,\n            data_scale numeric_scale,\n            nullable is_nullable,\n            column_id ordinal_position,\n            default_length,\n            data_default column_default,\n            num_distinct,\n            low_value,\n            high_value,\n            density,\n            num_nulls,\n            num_buckets,\n            last_analyzed,\n            sample_size,\n            SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\n            'SYS' character_set_schema,\n            SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\n            'SYS' collation_schema,\n            character_set_name,\n            char_col_decl_length,\n            global_stats,\n            user_stats,\n            avg_col_len,\n            char_length,\n            char_used,\n            v80_fmt_image,\n            data_upgraded,\n            histogram\n          from sys.all_tab_columns\n      )\n      select\n          lower(column_name) as \"name\",\n          lower(data_type) as \"type\",\n          char_length as \"character_maximum_length\",\n          numeric_precision as \"numeric_precision\",\n          numeric_scale as \"numeric_scale\"\n      from columns\n      where table_name = upper('{{ relation.identifier }}')\n        {% if relation.schema %}\n        and table_schema = upper('{{ relation.schema }}')\n        {% endif %}\n        {% if relation.database %}\n        and table_catalog = upper('{{ relation.database }}')\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle_escape_comment": {"unique_id": "macro.dbt_oracle.oracle_escape_comment", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle_escape_comment", "macro_sql": "{% macro oracle_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set start_quote = \"q'<\" -%}\n  {%- set end_quote = \">'\" -%}\n  {%- if end_quote in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ end_quote ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ start_quote }}{{ comment }}{{ end_quote }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__alter_relation_comment": {"unique_id": "macro.dbt_oracle.oracle__alter_relation_comment", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__alter_relation_comment", "macro_sql": "{% macro oracle__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = oracle_escape_comment(comment) %}\n  {# \"comment on table\" even for views #}\n  comment on table {{ relation.quote(schema=False, identifier=False) }} is {{ escaped_comment }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__persist_docs": {"unique_id": "macro.dbt_oracle.oracle__persist_docs", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__persist_docs", "macro_sql": "{% macro oracle__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% set column_dict = model.columns %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = oracle_escape_comment(comment) %}\n      {% call statement('alter _column comment', fetch_result=False) -%}\n        comment on column {{ relation.quote(schema=False, identifier=False) }}.{{ column_name }} is {{ escaped_comment }}\n      {%- endcall %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt_oracle.oracle_escape_comment", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__alter_column_type": {"unique_id": "macro.dbt_oracle.oracle__alter_column_type", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__alter_column_type", "macro_sql": "{% macro oracle__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type 1', fetch_result=False) %}\n    alter table {{ relation.quote(schema=False, identifier=False) }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }}\n  {% endcall %}\n  {% call statement('alter_column_type 2', fetch_result=False) %}\n    update {{ relation.quote(schema=False, identifier=False)  }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }}\n  {% endcall %}\n  {% call statement('alter_column_type 3', fetch_result=False) %}\n    alter table {{ relation.quote(schema=False, identifier=False) }} drop column {{ adapter.quote(column_name) }} cascade\n  {% endcall %}\n  {% call statement('alter_column_type 4', fetch_result=False) %}\n    rename column {{ relation.quote(schema=False, identifier=False) }}.{{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__drop_relation": {"unique_id": "macro.dbt_oracle.oracle__drop_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n   DECLARE\n     dne_942    EXCEPTION;\n     PRAGMA EXCEPTION_INIT(dne_942, -942);\n     attempted_ddl_on_in_use_GTT EXCEPTION;\n     pragma EXCEPTION_INIT(attempted_ddl_on_in_use_GTT, -14452);\n  BEGIN\n     EXECUTE IMMEDIATE 'DROP {{ relation.type }} {{ relation.quote(schema=False, identifier=False) }} cascade constraint';\n  EXCEPTION\n     WHEN attempted_ddl_on_in_use_GTT THEN\n        NULL; -- if it its a global temporary table, leave it alone.\n     WHEN dne_942 THEN\n        NULL; -- if it doesn't exist, do nothing .. no error, nothing .. ignore.\n  END;\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__truncate_relation": {"unique_id": "macro.dbt_oracle.oracle__truncate_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.quote(schema=False, identifier=False) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__rename_relation": {"unique_id": "macro.dbt_oracle.oracle__rename_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__rename_relation", "macro_sql": "{% macro oracle__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    rename {{ from_relation.include(False, False, True).quote(schema=False, identifier=False) }} to {{ to_relation.include(False, False, True).quote(schema=False, identifier=False) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__information_schema_name": {"unique_id": "macro.dbt_oracle.oracle__information_schema_name", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__information_schema_name", "macro_sql": "{% macro oracle__information_schema_name(database) -%}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  sys\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__list_schemas": {"unique_id": "macro.dbt_oracle.oracle__list_schemas", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__list_schemas", "macro_sql": "{% macro oracle__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n     \tselect lower(username) as \"name\"\n      from sys.all_users\n      order by username\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__check_schema_exists": {"unique_id": "macro.dbt_oracle.oracle__check_schema_exists", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__check_schema_exists", "macro_sql": "{% macro oracle__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from sys.all_users where username = upper('{{ schema }}')\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__list_relations_without_caching": {"unique_id": "macro.dbt_oracle.oracle__list_relations_without_caching", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__list_relations_without_caching", "macro_sql": "{% macro oracle__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    with tables as\n      (select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\n         UPPER(owner) table_schema,\n         table_name,\n         case\n           when iot_type = 'Y'\n           then 'IOT'\n           when temporary = 'Y'\n           then 'TEMP'\n           else 'BASE TABLE'\n         end table_type\n       from sys.all_tables\n       union all\n       select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')),\n         UPPER(owner),\n         view_name,\n         'VIEW'\n       from sys.all_views\n  )\n  select lower(table_catalog) as \"database_name\"\n    ,lower(table_name) as \"name\"\n    ,lower(table_schema) as \"schema_name\"\n    ,case table_type\n      when 'BASE TABLE' then 'table'\n      when 'VIEW' then 'view'\n    end as \"kind\"\n  from tables\n  where table_type in ('BASE TABLE', 'VIEW')\n    and table_catalog = upper('{{ schema_relation.database }}')\n    and table_schema = upper('{{ schema_relation.schema }}')\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__current_timestamp": {"unique_id": "macro.dbt_oracle.oracle__current_timestamp", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__current_timestamp", "macro_sql": "{% macro oracle__current_timestamp() -%}\n  CURRENT_TIMESTAMP\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__make_temp_relation": {"unique_id": "macro.dbt_oracle.oracle__make_temp_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "oracle__make_temp_relation", "macro_sql": "{% macro oracle__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S\") %}\n    {% set tmp_identifier = 'o$pt_' ~ base_relation.identifier ~ dtstring %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__get_catalog": {"unique_id": "macro.dbt_oracle.oracle__get_catalog", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "oracle__get_catalog", "macro_sql": "{% macro oracle__get_catalog(information_schema, schemas) -%}\r\n\r\n  {%- call statement('catalog', fetch_result=True) -%}\r\n    {#\r\n      If the user has multiple databases set and the first one is wrong, this will fail.\r\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\r\n    #}\r\n    {% set database = information_schema.database %}\r\n    {{ adapter.verify_database(database) }}\r\n\r\n    with columns as (\r\n            select\r\n                SYS_CONTEXT('userenv', 'DB_NAME') table_catalog,\r\n                owner table_schema,\r\n                table_name,\r\n                column_name,\r\n                data_type,\r\n                data_type_mod,\r\n                decode(data_type_owner, null, TO_CHAR(null), SYS_CONTEXT('userenv', 'DB_NAME')) domain_catalog,\r\n                data_type_owner domain_schema,\r\n                data_length character_maximum_length,\r\n                data_length character_octet_length,\r\n                data_length,\r\n                data_precision numeric_precision,\r\n                data_scale numeric_scale,\r\n                nullable is_nullable,\r\n                column_id ordinal_position,\r\n                default_length,\r\n                data_default column_default,\r\n                num_distinct,\r\n                low_value,\r\n                high_value,\r\n                density,\r\n                num_nulls,\r\n                num_buckets,\r\n                last_analyzed,\r\n                sample_size,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') character_set_catalog,\r\n                'SYS' character_set_schema,\r\n                SYS_CONTEXT('userenv', 'DB_NAME') collation_catalog,\r\n                'SYS' collation_schema,\r\n                character_set_name,\r\n                char_col_decl_length,\r\n                global_stats,\r\n                user_stats,\r\n                avg_col_len,\r\n                char_length,\r\n                char_used,\r\n                v80_fmt_image,\r\n                data_upgraded,\r\n                histogram\r\n              from sys.all_tab_columns\r\n          ),\r\n          tables as\r\n                (select UPPER(SYS_CONTEXT('userenv', 'DB_NAME')) table_catalog,\r\n                   UPPER(owner) table_schema,\r\n                   table_name,\r\n                   case\r\n                     when iot_type = 'Y'\r\n                     then 'IOT'\r\n                     when temporary = 'Y'\r\n                     then 'TEMP'\r\n                     else 'BASE TABLE'\r\n                   end table_type\r\n                 from sys.all_tables\r\n                 union all\r\n                 select SYS_CONTEXT('userenv', 'DB_NAME'),\r\n                   owner,\r\n                   view_name,\r\n                   'VIEW'\r\n                 from sys.all_views\r\n          )\r\n          select\r\n              lower(tables.table_catalog) as \"table_database\",\r\n              lower(tables.table_schema) as \"table_schema\",\r\n              lower(tables.table_name) as \"table_name\",\r\n              lower(tables.table_type) as \"table_type\",\r\n              all_tab_comments.comments as \"table_comment\",\r\n              lower(columns.column_name) as \"column_name\",\r\n              ordinal_position as \"column_index\",\r\n              lower(case\r\n                when data_type like '%CHAR%'\r\n                then data_type || '(' || cast(char_length as varchar(10)) || ')'\r\n                else data_type\r\n              end) as \"column_type\",\r\n              all_col_comments.comments as \"column_comment\",\r\n              tables.table_schema as \"table_owner\"\r\n          from tables\r\n          inner join columns on columns.table_catalog = tables.table_catalog\r\n            and columns.table_schema = tables.table_schema\r\n            and columns.table_name = tables.table_name\r\n          left join all_tab_comments\r\n            on all_tab_comments.owner = tables.table_schema\r\n              and all_tab_comments.table_name = tables.table_name\r\n          left join all_col_comments\r\n            on all_col_comments.owner = columns.table_schema\r\n              and all_col_comments.table_name = columns.table_name\r\n              and all_col_comments.column_name = columns.column_name\r\n          where (\r\n              {%- for schema in schemas -%}\r\n                tables.table_schema = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\r\n              {%- endfor -%}\r\n            )\r\n          order by\r\n              tables.table_schema,\r\n              tables.table_name,\r\n              ordinal_position\r\n  {%- endcall -%}\r\n\r\n  {{ return(load_result('catalog').table) }}\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__test_accepted_values": {"unique_id": "macro.dbt_oracle.oracle__test_accepted_values", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_accepted_values", "macro_sql": "{% macro oracle__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model.include(False, True, True) }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__test_not_null": {"unique_id": "macro.dbt_oracle.oracle__test_not_null", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_not_null", "macro_sql": "{% macro oracle__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom {{ model.include(False, True, True) }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__test_relationships": {"unique_id": "macro.dbt_oracle.oracle__test_relationships", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\schema_tests.sql", "original_file_path": "macros\\schema_tests.sql", "name": "oracle__test_relationships", "macro_sql": "{% macro oracle__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) child\nleft join (\n    select {{ field }} as id from {{ to }}\n) parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle_incremental_upsert_backup": {"unique_id": "macro.dbt_oracle.oracle_incremental_upsert_backup", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "oracle_incremental_upsert_backup", "macro_sql": "{% macro oracle_incremental_upsert_backup(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle_incremental_upsert": {"unique_id": "macro.dbt_oracle.oracle_incremental_upsert", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "oracle_incremental_upsert", "macro_sql": "{% macro oracle_incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='name') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    merge into {{ target_relation }} target\n      using {{ tmp_relation }} temp\n      on (temp.{{ unique_key }} = target.{{ unique_key }})\n    when matched then\n      update set\n      {% for col in dest_columns if col.name != unique_key %}\n        target.{{ col.name }} = temp.{{ col.name }}\n        {% if not loop.last %}, {% endif %}\n      {% endfor %}\n    when not matched then\n      insert( {{ dest_cols_csv }} )\n      values(\n        {% for col in dest_columns %}\n          temp.{{ col.name }}\n          {% if not loop.last %}, {% endif %}\n        {% endfor %}\n      )\n    {%- else %}\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    )\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.materialization_incremental_oracle": {"unique_id": "macro.dbt_oracle.materialization_incremental_oracle", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_oracle", "macro_sql": "{% materialization incremental, adapter='oracle' -%}\n\n  {% set unique_key = config.get('unique_key') %}\n  {% set full_refresh_mode = flags.FULL_REFRESH %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do to_drop.append(tmp_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = oracle_incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_oracle.oracle_incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle_basic_load_csv_rows": {"unique_id": "macro.dbt_oracle.oracle_basic_load_csv_rows", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "oracle_basic_load_csv_rows", "macro_sql": "{% macro oracle_basic_load_csv_rows(model, batch_size, agate_table) %}\n\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert all\n            {% for row in chunk -%}\n              into {{ this.render() }} ({{ cols_sql }}) values(\n                {%- for column in agate_table.column_names -%}\n                    :p{{ loop.index }} \n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor %})\n            {% endfor %}\n            select * from dual\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__load_csv_rows": {"unique_id": "macro.dbt_oracle.oracle__load_csv_rows", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "oracle__load_csv_rows", "macro_sql": "{% macro oracle__load_csv_rows(model, agate_table) %}\n  {{ return(oracle_basic_load_csv_rows(model, 100, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle_basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.create_columns": {"unique_id": "macro.dbt_oracle.create_columns", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.default__create_columns": {"unique_id": "macro.dbt_oracle.default__create_columns", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.post_snapshot": {"unique_id": "macro.dbt_oracle.post_snapshot", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.default__post_snapshot": {"unique_id": "macro.dbt_oracle.default__post_snapshot", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.snapshot_staging_table": {"unique_id": "macro.dbt_oracle.snapshot_staging_table", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select {{ target_relation }}.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            snapshot_query.*,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.build_snapshot_table": {"unique_id": "macro.dbt_oracle.build_snapshot_table", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select sbq.*,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        cast(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as DATE) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.get_or_create_relation": {"unique_id": "macro.dbt_oracle.get_or_create_relation", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.build_snapshot_staging_table": {"unique_id": "macro.dbt_oracle.build_snapshot_staging_table", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt_oracle.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.materialization_snapshot_oracle": {"unique_id": "macro.dbt_oracle.materialization_snapshot_oracle", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_oracle", "macro_sql": "{% materialization snapshot, adapter='oracle' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(column.name) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt_oracle.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_oracle.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_oracle.build_snapshot_staging_table", "macro.dbt_oracle.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_oracle.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__snapshot_hash_arguments": {"unique_id": "macro.dbt_oracle.oracle__snapshot_hash_arguments", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "oracle__snapshot_hash_arguments", "macro_sql": "{% macro oracle__snapshot_hash_arguments(args) -%}\n    ORA_HASH({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar(50) ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__snapshot_string_as_time": {"unique_id": "macro.dbt_oracle.oracle__snapshot_string_as_time", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "oracle__snapshot_string_as_time", "macro_sql": "{% macro oracle__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"TO_TIMESTAMP('\"~ timestamp ~ \"','yyyy/mm/dd hh24:mi:ss.FF')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.oracle__snapshot_merge_sql": {"unique_id": "macro.dbt_oracle.oracle__snapshot_merge_sql", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "oracle__snapshot_merge_sql", "macro_sql": "{% macro oracle__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = [] -%}\n    \n    {% for column in insert_cols %}\n      {% do insert_cols_csv.append(\"s.\" + column) %}\n    {% endfor %}\n\n    {%- set dest_cols_csv = [] -%}\n    \n    {% for column in insert_cols %}\n      {% do dest_cols_csv.append(\"d.\" + column) %}\n    {% endfor %}\n\n    merge into {{ target }} d\n    using {{ source }} s\n    on (s.dbt_scd_id = d.dbt_scd_id)\n\n    when matched\n        then update\n        set dbt_valid_to = s.dbt_valid_to\n        where d.dbt_valid_to is null\n          and s.dbt_change_type in ('update', 'delete')\n    when not matched\n        then insert ({{ dest_cols_csv | join(', ') }})\n        values ({{ insert_cols_csv | join(', ') }})\n        where s.dbt_change_type = 'insert'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_oracle.snapshot_check_strategy": {"unique_id": "macro.dbt_oracle.snapshot_check_strategy", "package_name": "dbt_oracle", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\oracle", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} FROM dual\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\core.sql", "original_file_path": "macros\\core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\common.sql", "original_file_path": "macros\\adapters\\common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_alias.sql", "original_file_path": "macros\\etc\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_database.sql", "original_file_path": "macros\\etc\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\get_custom_schema.sql", "original_file_path": "macros\\etc\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\is_incremental.sql", "original_file_path": "macros\\etc\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\query.sql", "original_file_path": "macros\\etc\\query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\helpers.sql", "original_file_path": "macros\\materializations\\helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\common\\merge.sql", "original_file_path": "macros\\materializations\\common\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt_oracle.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt_oracle.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt_oracle.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_oracle.build_snapshot_staging_table", "macro.dbt_oracle.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_oracle.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\table\\table.sql", "original_file_path": "macros\\materializations\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\view\\view.sql", "original_file_path": "macros\\materializations\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\accepted_values.sql", "original_file_path": "macros\\schema_tests\\accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\not_null.sql", "original_file_path": "macros\\schema_tests\\not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\relationships.sql", "original_file_path": "macros\\schema_tests\\relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_oracle.oracle__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\schema_tests\\unique.sql", "original_file_path": "macros\\schema_tests\\unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt_demo.orders_status": {"unique_id": "dbt_demo.orders_status", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "docs.md", "original_file_path": "models\\docs.md", "name": "orders_status", "block_contents": "Orders can be one of the following statuses:\r\n\r\n| status         | description                                                                                                            |\r\n|----------------|------------------------------------------------------------------------------------------------------------------------|\r\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\r\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\r\n| completed      | The order has been received by the customer                                                                            |\r\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\r\n| returned       | The order has been returned by the customer and received at the warehouse                                              |"}, "dbt_demo.__overview__": {"unique_id": "dbt_demo.__overview__", "package_name": "dbt_demo", "root_path": "D:\\study_hard\\dbt_demo", "path": "overview.md", "original_file_path": "models\\overview.md", "name": "__overview__", "block_contents": "## Data Documentation for Jaffle Shop\r\n\r\n`jaffle_shop` is a fictional ecommerce store.\r\n\r\nThis [dbt](https://www.getdbt.com/) project is for testing out code.\r\n\r\nThe source code can be found [here](https://github.com/clrcrl/jaffle_shop)."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "D:\\installed\\Development\\my_anaconda\\envs\\dbt\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.dbt_demo.customers": ["model.dbt_demo.stg_customers", "model.dbt_demo.stg_orders", "model.dbt_demo.stg_payments"], "model.dbt_demo.orders_test": ["model.dbt_demo.stg_orders", "model.dbt_demo.stg_payments"], "model.dbt_demo.stg_customers": ["seed.dbt_demo.raw_customers"], "model.dbt_demo.stg_orders": ["seed.dbt_demo.raw_orders"], "model.dbt_demo.stg_payments": ["seed.dbt_demo.raw_payments"], "seed.dbt_demo.raw_customers": [], "seed.dbt_demo.raw_orders": [], "seed.dbt_demo.raw_payments": [], "test.dbt_demo.unique_customers_customer_id": ["model.dbt_demo.customers"], "test.dbt_demo.not_null_customers_customer_id": ["model.dbt_demo.customers"], "test.dbt_demo.unique_orders_order_id": [], "test.dbt_demo.not_null_orders_order_id": [], "test.dbt_demo.not_null_orders_customer_id": [], "test.dbt_demo.relationships_orders_customer_id__customer_id__ref_customers_": ["model.dbt_demo.customers"], "test.dbt_demo.accepted_values_orders_status__placed__shipped__completed__return_pending__returned": [], "test.dbt_demo.not_null_orders_amount": [], "test.dbt_demo.not_null_orders_credit_card_amount": [], "test.dbt_demo.not_null_orders_coupon_amount": [], "test.dbt_demo.not_null_orders_bank_transfer_amount": [], "test.dbt_demo.not_null_orders_gift_card_amount": [], "test.dbt_demo.unique_stg_customers_customer_id": ["model.dbt_demo.stg_customers"], "test.dbt_demo.not_null_stg_customers_customer_id": ["model.dbt_demo.stg_customers"], "test.dbt_demo.unique_stg_orders_order_id": ["model.dbt_demo.stg_orders"], "test.dbt_demo.not_null_stg_orders_order_id": ["model.dbt_demo.stg_orders"], "test.dbt_demo.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned": ["model.dbt_demo.stg_orders"], "test.dbt_demo.unique_stg_payments_payment_id": ["model.dbt_demo.stg_payments"], "test.dbt_demo.not_null_stg_payments_payment_id": ["model.dbt_demo.stg_payments"], "test.dbt_demo.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card": ["model.dbt_demo.stg_payments"]}, "child_map": {"model.dbt_demo.customers": ["test.dbt_demo.not_null_customers_customer_id", "test.dbt_demo.relationships_orders_customer_id__customer_id__ref_customers_", "test.dbt_demo.unique_customers_customer_id"], "model.dbt_demo.orders_test": [], "model.dbt_demo.stg_customers": ["model.dbt_demo.customers", "test.dbt_demo.not_null_stg_customers_customer_id", "test.dbt_demo.unique_stg_customers_customer_id"], "model.dbt_demo.stg_orders": ["model.dbt_demo.customers", "model.dbt_demo.orders_test", "test.dbt_demo.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned", "test.dbt_demo.not_null_stg_orders_order_id", "test.dbt_demo.unique_stg_orders_order_id"], "model.dbt_demo.stg_payments": ["model.dbt_demo.customers", "model.dbt_demo.orders_test", "test.dbt_demo.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card", "test.dbt_demo.not_null_stg_payments_payment_id", "test.dbt_demo.unique_stg_payments_payment_id"], "seed.dbt_demo.raw_customers": ["model.dbt_demo.stg_customers"], "seed.dbt_demo.raw_orders": ["model.dbt_demo.stg_orders"], "seed.dbt_demo.raw_payments": ["model.dbt_demo.stg_payments"], "test.dbt_demo.unique_customers_customer_id": [], "test.dbt_demo.not_null_customers_customer_id": [], "test.dbt_demo.unique_orders_order_id": [], "test.dbt_demo.not_null_orders_order_id": [], "test.dbt_demo.not_null_orders_customer_id": [], "test.dbt_demo.relationships_orders_customer_id__customer_id__ref_customers_": [], "test.dbt_demo.accepted_values_orders_status__placed__shipped__completed__return_pending__returned": [], "test.dbt_demo.not_null_orders_amount": [], "test.dbt_demo.not_null_orders_credit_card_amount": [], "test.dbt_demo.not_null_orders_coupon_amount": [], "test.dbt_demo.not_null_orders_bank_transfer_amount": [], "test.dbt_demo.not_null_orders_gift_card_amount": [], "test.dbt_demo.unique_stg_customers_customer_id": [], "test.dbt_demo.not_null_stg_customers_customer_id": [], "test.dbt_demo.unique_stg_orders_order_id": [], "test.dbt_demo.not_null_stg_orders_order_id": [], "test.dbt_demo.accepted_values_stg_orders_status__placed__shipped__completed__return_pending__returned": [], "test.dbt_demo.unique_stg_payments_payment_id": [], "test.dbt_demo.not_null_stg_payments_payment_id": [], "test.dbt_demo.accepted_values_stg_payments_payment_method__credit_card__coupon__bank_transfer__gift_card": []}}